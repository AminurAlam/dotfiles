--- /data/data/com.termux/files/home/YoutubeDL-orig.py	2024-07-17 18:58:26.900208165 +0530
+++ YoutubeDL.py	2024-07-17 18:57:26.860208162 +0530
@@ -3787,15 +3787,16 @@
         self.archive.add(vid_id)
 
     @staticmethod
-    def format_resolution(format, default='unknown'):
+    def format_resolution(format, default='??'):
         if format.get('vcodec') == 'none' and format.get('acodec') != 'none':
-            return 'audio only'
+            return ''
+        if format.get('height'):
+            h = str(format['height'])
+            if h == '1440': return '2k'
+            if h == '2160': return '4k'
+            return '{}p'.format(format['height'])
         if format.get('resolution') is not None:
             return format['resolution']
-        if format.get('width') and format.get('height'):
-            return '%dx%d' % (format['width'], format['height'])
-        elif format.get('height'):
-            return '{}p'.format(format['height'])
         elif format.get('width'):
             return '%dx?' % format['width']
         return default
@@ -3890,39 +3891,30 @@
             assert field in ('acodec', 'vcodec')
             codec = f.get(field)
             if not codec:
-                return 'unknown'
+                return '??'
             elif codec != 'none':
-                return '.'.join(codec.split('.')[:4])
+                return codec.split('.')[0]
 
             if field == 'vcodec' and f.get('acodec') == 'none':
-                return 'images'
+                return 'img'
             elif field == 'acodec' and f.get('vcodec') == 'none':
                 return ''
-            return self._format_out('audio only' if field == 'vcodec' else 'video only',
+            return self._format_out('aud' if field == 'vcodec' else 'vid',
                                     self.Styles.SUPPRESS)
 
         delim = self._format_out('\u2502', self.Styles.DELIM, '|', test_encoding=True)
         table = [
             [
                 self._format_out(format_field(f, 'format_id'), self.Styles.ID),
-                format_field(f, 'ext'),
                 format_field(f, func=self.format_resolution, ignore=('audio only', 'images')),
-                format_field(f, 'fps', '\t%d', func=round),
-                format_field(f, 'dynamic_range', '%s', ignore=(None, 'SDR')).replace('HDR', ''),
-                format_field(f, 'audio_channels', '\t%s'),
-                delim, (
-                    format_field(f, 'filesize', ' \t%s', func=format_bytes)
-                    or format_field(f, 'filesize_approx', '≈\t%s', func=format_bytes)
-                    or format_field(filesize_from_tbr(f.get('tbr'), info_dict.get('duration')), None,
-                                    self._format_out('~\t%s', self.Styles.SUPPRESS), func=format_bytes)),
-                format_field(f, 'tbr', '\t%dk', func=round),
-                shorten_protocol_name(f.get('protocol', '')),
+                (
+                    format_field(f, 'filesize', ' %s', func=format_decimal_suffix)
+                    or format_field(f, 'filesize_approx', ' ≈%s', func=format_decimal_suffix)
+                    or format_field(filesize_from_tbr(f.get('tbr'), info_dict.get('duration')), None, ' ~%s', func=format_decimal_suffix)),
                 delim,
                 simplified_codec(f, 'vcodec'),
                 format_field(f, 'vbr', '\t%dk', func=round),
                 simplified_codec(f, 'acodec'),
-                format_field(f, 'abr', '\t%dk', func=round),
-                format_field(f, 'asr', '\t%s', func=format_decimal_suffix),
                 join_nonempty(format_field(f, 'language', '[%s]'), join_nonempty(
                     self._format_out('UNSUPPORTED', self.Styles.BAD_FORMAT) if f.get('ext') in ('f4f', 'f4m') else None,
                     (self._format_out('Maybe DRM', self.Styles.WARNING) if f.get('has_drm') == 'maybe'
@@ -3931,9 +3923,7 @@
                     format_field(f, 'container', ignore=(None, f.get('ext'))),
                     delim=', '), delim=' '),
             ] for f in formats if f.get('preference') is None or f['preference'] >= -1000]
-        header_line = self._list_format_headers(
-            'ID', 'EXT', 'RESOLUTION', '\tFPS', 'HDR', 'CH', delim, '\tFILESIZE', '\tTBR', 'PROTO',
-            delim, 'VCODEC', '\tVBR', 'ACODEC', '\tABR', '\tASR', 'MORE INFO')
+        header_line = self._list_format_headers('ID', 'RES', '\tSIZE', delim, 'VCODEC', '\tVBR', 'ACODEC', 'INFO')
 
         return render_table(
             header_line, table, hide_empty=True,
