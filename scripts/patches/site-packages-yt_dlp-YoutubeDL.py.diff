--- YoutubeDL.py	2024-03-18 22:56:33.973085236 +0530
+++ /data/data/com.termux/files/home/YoutubeDL.py	2024-03-18 21:03:20.428360920 +0530
@@ -3719,16 +3719,14 @@
         self.archive.add(vid_id)
 
     @staticmethod
-    def format_resolution(format, default='??'):
+    def format_resolution(format, default='unknown'):
         if format.get('vcodec') == 'none' and format.get('acodec') != 'none':
-            return 'aud'
+            return 'audio only'
         if format.get('resolution') is not None:
             return format['resolution']
-        # if format.get('width') and format.get('height'):
-        #     return '%dx%d' % (format['width'], format['height'])
-        if format.get('height'):
-            if format['height'] == 2160: return '4k'
-            elif format['height'] == 1440: return '2k'
+        if format.get('width') and format.get('height'):
+            return '%dx%d' % (format['width'], format['height'])
+        elif format.get('height'):
             return '%sp' % format['height']
         elif format.get('width'):
             return '%dx?' % format['width']
@@ -3824,62 +3822,50 @@
             assert field in ('acodec', 'vcodec')
             codec = f.get(field)
             if not codec:
-                return self._format_out('??', self.Styles.SUPPRESS)
+                return 'unknown'
             elif codec != 'none':
-                return codec.split('.')[0]
+                return '.'.join(codec.split('.')[:4])
 
             if field == 'vcodec' and f.get('acodec') == 'none':
-                return 'img'
+                return 'images'
             elif field == 'acodec' and f.get('vcodec') == 'none':
                 return ''
-            return self._format_out('aud' if field == 'vcodec' else 'vid',
+            return self._format_out('audio only' if field == 'vcodec' else 'video only',
                                     self.Styles.SUPPRESS)
 
         delim = self._format_out('\u2502', self.Styles.DELIM, '|', test_encoding=True)
         table = [
             [
-                self._format_out(
-                format_field(f, 'format_id'), self.Styles.ID),
+                self._format_out(format_field(f, 'format_id'), self.Styles.ID),
+                format_field(f, 'ext'),
                 format_field(f, func=self.format_resolution, ignore=('audio only', 'images')),
                 format_field(f, 'fps', '\t%d', func=round),
                 format_field(f, 'dynamic_range', '%s', ignore=(None, 'SDR')).replace('HDR', ''),
-                # format_field(f, 'audio_channels', '\t%s'),
-                (
+                format_field(f, 'audio_channels', '\t%s'),
+                delim, (
                     format_field(f, 'filesize', ' \t%s', func=format_bytes)
                     or format_field(f, 'filesize_approx', 'â‰ˆ\t%s', func=format_bytes)
-                    or format_field(
-                        try_call(lambda: format_bytes(int(info_dict['duration'] * f['tbr'] * (1024 / 8)))),
-                        None, '~%s'
-                    )),
-                # format_field(f, 'tbr', '\t%dk', func=round),
+                    or format_field(try_call(lambda: format_bytes(int(info_dict['duration'] * f['tbr'] * (1024 / 8)))),
+                                    None, self._format_out('~\t%s', self.Styles.SUPPRESS))),
+                format_field(f, 'tbr', '\t%dk', func=round),
+                shorten_protocol_name(f.get('protocol', '')),
                 delim,
-                format_field(f, 'ext'),
                 simplified_codec(f, 'vcodec'),
-                # format_field(f, 'vbr', '\t%dk', func=round),
+                format_field(f, 'vbr', '\t%dk', func=round),
                 simplified_codec(f, 'acodec'),
-                # format_field(f, 'abr', '\t%dk', func=round),
-                # format_field(f, 'asr', '\t%s', func=format_decimal_suffix),
-                shorten_protocol_name(f.get('protocol', '')),
-                # join_nonempty(format_field(f, 'language', '[%s]'), join_nonempty(
-                #     self._format_out('UNSUPPORTED', self.Styles.BAD_FORMAT) if f.get('ext') in ('f4f', 'f4m') else None,
-                #     (self._format_out('Maybe DRM', self.Styles.WARNING) if f.get('has_drm') == 'maybe'
-                #      else self._format_out('DRM', self.Styles.BAD_FORMAT) if f.get('has_drm') else None),
-                #     format_field(f, 'format_note'),
-                #     format_field(f, 'container', ignore=(None, f.get('ext'))),
-                #     delim=', '), delim=' '),
+                format_field(f, 'abr', '\t%dk', func=round),
+                format_field(f, 'asr', '\t%s', func=format_decimal_suffix),
+                join_nonempty(format_field(f, 'language', '[%s]'), join_nonempty(
+                    self._format_out('UNSUPPORTED', self.Styles.BAD_FORMAT) if f.get('ext') in ('f4f', 'f4m') else None,
+                    (self._format_out('Maybe DRM', self.Styles.WARNING) if f.get('has_drm') == 'maybe'
+                     else self._format_out('DRM', self.Styles.BAD_FORMAT) if f.get('has_drm') else None),
+                    format_field(f, 'format_note'),
+                    format_field(f, 'container', ignore=(None, f.get('ext'))),
+                    delim=', '), delim=' '),
             ] for f in formats if f.get('preference') is None or f['preference'] >= -1000]
         header_line = self._list_format_headers(
-            'ID',
-            'RES',
-            '\tFPS',
-            'HDR',
-            '\tSIZE',
-            delim,
-            'EXT',
-            'VCODEC',
-            'ACODEC',
-            'PROTO',
-        )
+            'ID', 'EXT', 'RESOLUTION', '\tFPS', 'HDR', 'CH', delim, '\tFILESIZE', '\tTBR', 'PROTO',
+            delim, 'VCODEC', '\tVBR', 'ACODEC', '\tABR', '\tASR', 'MORE INFO')
 
         return render_table(
             header_line, table, hide_empty=True,
